<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.kh.team2.dao.MemberDAO">


	<!-- =============================== INSERT =============================== -->

	<insert id="insertMember">
		INSERT INTO member(me_id, me_ms_state, me_ma_auth, me_pw, me_nickname, me_name, me_phone, me_address, me_type)
			VALUE(#{member.me_id}, "이용중", "일반", #{member.me_pw}, #{member.me_nickname}, #{member.me_name}, #{member.me_phone}, #{member.me_address}, "일반")
	</insert>	
	
	<insert id="insertMemberSns">
		insert into member(me_id, me_ms_state, me_ma_auth, me_pw, me_nickname, me_name, me_phone, me_address, me_type, me_verify)
			value(#{ssd.email},"이용중","일반",#{ssd.me_pw},#{ssd.nickname}, #{ssd.name}, #{ssd.phone}, #{ssd.address}, #{ssd.sns},1)
	</insert>
	
	
	<insert id="insertMemberVerify">
		INSERT INTO me_verify value(#{mv.mv_me_id},#{mv.mv_code},DATE_ADD(NOW(), INTERVAL 3 MINUTE),now())
	</insert>
	
	<!-- =============================== DELETE =============================== -->
	<delete id="deleteMemberVerify">
		delete from me_verify where mv_me_id = #{me_id}
	</delete>
	
	<!-- 멤버 정보 삭제 -->
	<delete id="deleteMemberVO">
		delete from member where me_id = #{me_id}
	</delete>
	
	<!-- =============================== UPDATE =============================== -->	
	
	<update id="updateProfile">
		update member set me_interests = #{member.me_interests}, me_preferloc = #{member.me_preferloc}, me_prefertime = #{member.me_prefertime}, me_onoff = #{member.me_onoff}, me_intro = #{member.me_intro}
		where me_id = #{me_id}
	</update>
	
	<update id="updateMemberCookie">
	  	update member set 
	  		me_cookie = #{user.me_cookie},
	  		me_cookie_limit = #{user.me_cookie_limit}
	  	where
	  		me_id = #{user.me_id}
 	 </update>
	
	<update id="updateMemberPwToTemp">
		update member set
			me_pw = #{member.me_pw},
			me_temppw = 1
		where
			me_id = #{member.me_id}
	</update>
	
	<update id="updateMemberPwToNorm">
		update member set
			me_pw = #{cpt.me_pw},
			me_temppw = 0
		where
			me_id =#{cpt.me_id}
	</update>
	
	<update id="updateMemberVerify">
		update member set
			me_verify = #{member.me_verify}
		where
			me_id = #{member.me_id}
	</update>

	<update id="updateMemberState">
		update member set me_ms_state = #{me_ms_state}
		where me_id = #{me_id}
	</update>
	<!-- 회원 정보 변경(상태, 권한) -->
	<update id="updateMember">
		update member set me_ma_auth = #{me.me_ma_auth}, me_ms_state = #{me.me_ms_state}
		where me_id = #{me.me_id}
	</update>

	<!-- =============================== SELECT =============================== -->	
	
	<select id="findMemberById" resultType="MemberVO">
		SELECT * FROM member WHERE me_id = #{id}
	</select>
	
	<select id="findMemberByNickname" resultType="MemberVO">
		SELECT * FROM member WHERE me_nickname = #{nickname}
	</select>
	
	<!-- 회원 정보 가져오기 -->
	<select id="selectMember" resultType="MemberVO">
		SELECT * FROM member WHERE me_id = #{me_id}
	</select>
	
	<select id="idFind" resultType="String">
		select me_id from member where me_name = #{me_name} and me_phone = #{me_phone}
	</select>
	
	<select id="pwFind" resultType="MemberVO">
		select * from member where me_id = #{me_id} and me_phone = #{me_phone}
	</select>
	
	<select id="selectMemberByCookie" resultType="MemberVO">
	  	<![CDATA[
	  	select * from member where 
	  		me_cookie = #{session_id} and me_cookie_limit >= now()
	 	]]>
	</select>
	
	<select id="selectMeVerify" resultType="MeVerifyVO">
		<![CDATA[
		select * 
		from me_verify
		where mv_me_id = #{mv.mv_me_id} and mv_code = #{mv.mv_code}
			  and mv_createtime <= NOW() and mv_exptime >= NOW()
		]]>
  </select>
  
	<!-- 회원 상태 리스트 가져오기 -->
	<select id="selectMemberStateList" resultType="String">
		select ms_state from member_state
	</select>
	
	<!-- 관리자 제외한 회원 전체 리스트 가져오기 -->
	<select id="selectAdminMemberList" resultType="MemberVO">
		select * from member 
		where me_ma_auth != "관리자"
		<choose>
			<when test='cri.type == "all" '>
				and me_id like concat('%', #{cri.search}, '%')
			</when>
			<when test='cri.type == "auth"'>
				and me_ma_auth like concat('%', #{cri.search}, '%')
			</when>
			<when test='cri.type == "state"'>
				and me_ms_state like concat('%', #{cri.search}, '%')
			</when>
		</choose>
		limit #{cri.pageStart}, #{cri.perPageNum}
		
	</select>
	
	<!-- 관리자 제외한 회원 전체 개수 -->
	<select id="selectAdminMemberTotalCount"  resultType="int">
		select count(*) from member 
			where me_ma_auth != "관리자"
			<choose>
				<when test='cri.type == "all" '>
					and me_id like concat('%', #{cri.search}, '%')
				</when>
				<when test='cri.type == "auth"'>
					and me_ma_auth like concat('%', #{cri.search}, '%')
				</when>
				<when test='cri.type == "state"'>
					and me_ms_state like concat('%', #{cri.search}, '%')
				</when>
			</choose>
	</select>
	
	<!-- 관리자 제외한 회원 권한 리스트 가져오기 -->
	<select id="selectMemberAuthList" resultType="String">
		select ma_auth from member_auth where ma_auth != "관리자"
	</select>
	
	<!-- sns로그인 -->
	<select id="selectMemberSns" resultType="MemberVO">
		select * from member where me_id = #{id} and me_type = #{sns}
	</select>

</mapper>